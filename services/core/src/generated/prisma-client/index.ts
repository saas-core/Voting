// Code generated by Prisma (prisma@1.27.4). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  sourceNetwork: (where?: SourceNetworkWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  vote: (where?: VoteWhereInput) => Promise<boolean>;
  voteCount: (where?: VoteCountWhereInput) => Promise<boolean>;
  voter: (where?: VoterWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  sourceNetwork: (where: SourceNetworkWhereUniqueInput) => SourceNetworkPromise;
  sourceNetworks: (
    args?: {
      where?: SourceNetworkWhereInput;
      orderBy?: SourceNetworkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<SourceNetwork>;
  sourceNetworksConnection: (
    args?: {
      where?: SourceNetworkWhereInput;
      orderBy?: SourceNetworkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => SourceNetworkConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  vote: (where: VoteWhereUniqueInput) => VotePromise;
  votes: (
    args?: {
      where?: VoteWhereInput;
      orderBy?: VoteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Vote>;
  votesConnection: (
    args?: {
      where?: VoteWhereInput;
      orderBy?: VoteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => VoteConnectionPromise;
  voteCount: (where: VoteCountWhereUniqueInput) => VoteCountPromise;
  voteCounts: (
    args?: {
      where?: VoteCountWhereInput;
      orderBy?: VoteCountOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<VoteCount>;
  voteCountsConnection: (
    args?: {
      where?: VoteCountWhereInput;
      orderBy?: VoteCountOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => VoteCountConnectionPromise;
  voter: (where: VoterWhereUniqueInput) => VoterPromise;
  voters: (
    args?: {
      where?: VoterWhereInput;
      orderBy?: VoterOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Voter>;
  votersConnection: (
    args?: {
      where?: VoterWhereInput;
      orderBy?: VoterOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => VoterConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createSourceNetwork: (data: SourceNetworkCreateInput) => SourceNetworkPromise;
  updateSourceNetwork: (
    args: {
      data: SourceNetworkUpdateInput;
      where: SourceNetworkWhereUniqueInput;
    }
  ) => SourceNetworkPromise;
  updateManySourceNetworks: (
    args: {
      data: SourceNetworkUpdateManyMutationInput;
      where?: SourceNetworkWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertSourceNetwork: (
    args: {
      where: SourceNetworkWhereUniqueInput;
      create: SourceNetworkCreateInput;
      update: SourceNetworkUpdateInput;
    }
  ) => SourceNetworkPromise;
  deleteSourceNetwork: (
    where: SourceNetworkWhereUniqueInput
  ) => SourceNetworkPromise;
  deleteManySourceNetworks: (
    where?: SourceNetworkWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createVote: (data: VoteCreateInput) => VotePromise;
  updateVote: (
    args: { data: VoteUpdateInput; where: VoteWhereUniqueInput }
  ) => VotePromise;
  updateManyVotes: (
    args: { data: VoteUpdateManyMutationInput; where?: VoteWhereInput }
  ) => BatchPayloadPromise;
  upsertVote: (
    args: {
      where: VoteWhereUniqueInput;
      create: VoteCreateInput;
      update: VoteUpdateInput;
    }
  ) => VotePromise;
  deleteVote: (where: VoteWhereUniqueInput) => VotePromise;
  deleteManyVotes: (where?: VoteWhereInput) => BatchPayloadPromise;
  createVoteCount: (data: VoteCountCreateInput) => VoteCountPromise;
  updateVoteCount: (
    args: { data: VoteCountUpdateInput; where: VoteCountWhereUniqueInput }
  ) => VoteCountPromise;
  updateManyVoteCounts: (
    args: {
      data: VoteCountUpdateManyMutationInput;
      where?: VoteCountWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertVoteCount: (
    args: {
      where: VoteCountWhereUniqueInput;
      create: VoteCountCreateInput;
      update: VoteCountUpdateInput;
    }
  ) => VoteCountPromise;
  deleteVoteCount: (where: VoteCountWhereUniqueInput) => VoteCountPromise;
  deleteManyVoteCounts: (where?: VoteCountWhereInput) => BatchPayloadPromise;
  createVoter: (data: VoterCreateInput) => VoterPromise;
  updateVoter: (
    args: { data: VoterUpdateInput; where: VoterWhereUniqueInput }
  ) => VoterPromise;
  updateManyVoters: (
    args: { data: VoterUpdateManyMutationInput; where?: VoterWhereInput }
  ) => BatchPayloadPromise;
  upsertVoter: (
    args: {
      where: VoterWhereUniqueInput;
      create: VoterCreateInput;
      update: VoterUpdateInput;
    }
  ) => VoterPromise;
  deleteVoter: (where: VoterWhereUniqueInput) => VoterPromise;
  deleteManyVoters: (where?: VoterWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  sourceNetwork: (
    where?: SourceNetworkSubscriptionWhereInput
  ) => SourceNetworkSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  vote: (
    where?: VoteSubscriptionWhereInput
  ) => VoteSubscriptionPayloadSubscription;
  voteCount: (
    where?: VoteCountSubscriptionWhereInput
  ) => VoteCountSubscriptionPayloadSubscription;
  voter: (
    where?: VoterSubscriptionWhereInput
  ) => VoterSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "avatarUrl_ASC"
  | "avatarUrl_DESC"
  | "title_ASC"
  | "title_DESC"
  | "displayName_ASC"
  | "displayName_DESC"
  | "timezone_ASC"
  | "timezone_DESC"
  | "timezoneLabel_ASC"
  | "timezoneLabel_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type VoteType = "UPVOTE" | "DOWNVOTE";

export type VoteOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "vote_ASC"
  | "vote_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type SourceNetworkOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "sourceId_ASC"
  | "sourceId_DESC"
  | "sourceToken_ASC"
  | "sourceToken_DESC"
  | "sourceType_ASC"
  | "sourceType_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type VoteCountOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "resourceId_ASC"
  | "resourceId_DESC"
  | "upvotes_ASC"
  | "upvotes_DESC"
  | "downvotes_ASC"
  | "downvotes_DESC"
  | "total_ASC"
  | "total_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type SourceType = "SLACK";

export type VoterOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "avatarUrl_ASC"
  | "avatarUrl_DESC"
  | "title_ASC"
  | "title_DESC"
  | "displayName_ASC"
  | "displayName_DESC"
  | "timezone_ASC"
  | "timezone_DESC"
  | "timezoneLabel_ASC"
  | "timezoneLabel_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "resourceId_ASC"
  | "resourceId_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface SourceNetworkUpsertWithWhereUniqueNestedInput {
  where: SourceNetworkWhereUniqueInput;
  update: SourceNetworkUpdateDataInput;
  create: SourceNetworkCreateInput;
}

export type SourceNetworkWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface VoteUpdateManyWithoutVoteCountInput {
  create?: VoteCreateWithoutVoteCountInput[] | VoteCreateWithoutVoteCountInput;
  delete?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  connect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  set?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  disconnect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  update?:
    | VoteUpdateWithWhereUniqueWithoutVoteCountInput[]
    | VoteUpdateWithWhereUniqueWithoutVoteCountInput;
  upsert?:
    | VoteUpsertWithWhereUniqueWithoutVoteCountInput[]
    | VoteUpsertWithWhereUniqueWithoutVoteCountInput;
  deleteMany?: VoteScalarWhereInput[] | VoteScalarWhereInput;
  updateMany?:
    | VoteUpdateManyWithWhereNestedInput[]
    | VoteUpdateManyWithWhereNestedInput;
}

export interface VoteUpdateManyMutationInput {
  vote?: VoteType;
}

export interface VoteCreateInput {
  vote: VoteType;
  user: VoterCreateOneWithoutVotesInput;
  voteCount: VoteCountCreateOneWithoutVotesInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface SourceNetworkCreateInput {
  sourceId: String;
  sourceToken?: String;
  sourceType?: SourceType;
}

export interface VoteSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: VoteWhereInput;
  AND?: VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput;
  OR?: VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput;
  NOT?: VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput;
}

export interface SourceNetworkUpdateInput {
  sourceId?: String;
  sourceToken?: String;
  sourceType?: SourceType;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface SourceNetworkUpdateManyMutationInput {
  sourceId?: String;
  sourceToken?: String;
  sourceType?: SourceType;
}

export interface VoterUpdateManyMutationInput {
  name?: String;
  email?: String;
  avatarUrl?: String;
  title?: String;
  displayName?: String;
  timezone?: String;
  timezoneLabel?: String;
  resourceId?: ID_Input;
}

export interface VoteCountUpdateInput {
  resourceId?: ID_Input;
  upvotes?: Int;
  downvotes?: Int;
  total?: Int;
  votes?: VoteUpdateManyWithoutVoteCountInput;
}

export type VoteWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface VoteCreateWithoutVoteCountInput {
  vote: VoteType;
  user: VoterCreateOneWithoutVotesInput;
}

export interface VoteUpdateWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput;
  data: VoteUpdateWithoutUserDataInput;
}

export interface UserCreateInput {
  name: String;
  email?: String;
  avatarUrl?: String;
  title?: String;
  displayName?: String;
  timezone?: String;
  timezoneLabel?: String;
  sources?: SourceNetworkCreateManyInput;
}

export interface VoteWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  vote?: VoteType;
  vote_not?: VoteType;
  vote_in?: VoteType[] | VoteType;
  vote_not_in?: VoteType[] | VoteType;
  user?: VoterWhereInput;
  voteCount?: VoteCountWhereInput;
  AND?: VoteWhereInput[] | VoteWhereInput;
  OR?: VoteWhereInput[] | VoteWhereInput;
  NOT?: VoteWhereInput[] | VoteWhereInput;
}

export interface SourceNetworkCreateManyInput {
  create?: SourceNetworkCreateInput[] | SourceNetworkCreateInput;
  connect?: SourceNetworkWhereUniqueInput[] | SourceNetworkWhereUniqueInput;
}

export interface VoteCountWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  resourceId?: ID_Input;
  resourceId_not?: ID_Input;
  resourceId_in?: ID_Input[] | ID_Input;
  resourceId_not_in?: ID_Input[] | ID_Input;
  resourceId_lt?: ID_Input;
  resourceId_lte?: ID_Input;
  resourceId_gt?: ID_Input;
  resourceId_gte?: ID_Input;
  resourceId_contains?: ID_Input;
  resourceId_not_contains?: ID_Input;
  resourceId_starts_with?: ID_Input;
  resourceId_not_starts_with?: ID_Input;
  resourceId_ends_with?: ID_Input;
  resourceId_not_ends_with?: ID_Input;
  upvotes?: Int;
  upvotes_not?: Int;
  upvotes_in?: Int[] | Int;
  upvotes_not_in?: Int[] | Int;
  upvotes_lt?: Int;
  upvotes_lte?: Int;
  upvotes_gt?: Int;
  upvotes_gte?: Int;
  downvotes?: Int;
  downvotes_not?: Int;
  downvotes_in?: Int[] | Int;
  downvotes_not_in?: Int[] | Int;
  downvotes_lt?: Int;
  downvotes_lte?: Int;
  downvotes_gt?: Int;
  downvotes_gte?: Int;
  total?: Int;
  total_not?: Int;
  total_in?: Int[] | Int;
  total_not_in?: Int[] | Int;
  total_lt?: Int;
  total_lte?: Int;
  total_gt?: Int;
  total_gte?: Int;
  votes_every?: VoteWhereInput;
  votes_some?: VoteWhereInput;
  votes_none?: VoteWhereInput;
  AND?: VoteCountWhereInput[] | VoteCountWhereInput;
  OR?: VoteCountWhereInput[] | VoteCountWhereInput;
  NOT?: VoteCountWhereInput[] | VoteCountWhereInput;
}

export interface UserUpdateInput {
  name?: String;
  email?: String;
  avatarUrl?: String;
  title?: String;
  displayName?: String;
  timezone?: String;
  timezoneLabel?: String;
  sources?: SourceNetworkUpdateManyInput;
}

export interface VoteCreateWithoutUserInput {
  vote: VoteType;
  voteCount: VoteCountCreateOneWithoutVotesInput;
}

export interface SourceNetworkUpdateManyInput {
  create?: SourceNetworkCreateInput[] | SourceNetworkCreateInput;
  update?:
    | SourceNetworkUpdateWithWhereUniqueNestedInput[]
    | SourceNetworkUpdateWithWhereUniqueNestedInput;
  upsert?:
    | SourceNetworkUpsertWithWhereUniqueNestedInput[]
    | SourceNetworkUpsertWithWhereUniqueNestedInput;
  delete?: SourceNetworkWhereUniqueInput[] | SourceNetworkWhereUniqueInput;
  connect?: SourceNetworkWhereUniqueInput[] | SourceNetworkWhereUniqueInput;
  set?: SourceNetworkWhereUniqueInput[] | SourceNetworkWhereUniqueInput;
  disconnect?: SourceNetworkWhereUniqueInput[] | SourceNetworkWhereUniqueInput;
  deleteMany?: SourceNetworkScalarWhereInput[] | SourceNetworkScalarWhereInput;
  updateMany?:
    | SourceNetworkUpdateManyWithWhereNestedInput[]
    | SourceNetworkUpdateManyWithWhereNestedInput;
}

export interface VoterCreateInput {
  name: String;
  email?: String;
  avatarUrl?: String;
  title?: String;
  displayName?: String;
  timezone?: String;
  timezoneLabel?: String;
  resourceId: ID_Input;
  votes?: VoteCreateManyWithoutUserInput;
}

export interface SourceNetworkUpdateWithWhereUniqueNestedInput {
  where: SourceNetworkWhereUniqueInput;
  data: SourceNetworkUpdateDataInput;
}

export type VoteCountWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface SourceNetworkUpdateDataInput {
  sourceId?: String;
  sourceToken?: String;
  sourceType?: SourceType;
}

export interface VoteUpdateManyDataInput {
  vote?: VoteType;
}

export interface VoteCreateManyWithoutVoteCountInput {
  create?: VoteCreateWithoutVoteCountInput[] | VoteCreateWithoutVoteCountInput;
  connect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
}

export interface VoteScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  vote?: VoteType;
  vote_not?: VoteType;
  vote_in?: VoteType[] | VoteType;
  vote_not_in?: VoteType[] | VoteType;
  AND?: VoteScalarWhereInput[] | VoteScalarWhereInput;
  OR?: VoteScalarWhereInput[] | VoteScalarWhereInput;
  NOT?: VoteScalarWhereInput[] | VoteScalarWhereInput;
}

export interface SourceNetworkScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  sourceId?: String;
  sourceId_not?: String;
  sourceId_in?: String[] | String;
  sourceId_not_in?: String[] | String;
  sourceId_lt?: String;
  sourceId_lte?: String;
  sourceId_gt?: String;
  sourceId_gte?: String;
  sourceId_contains?: String;
  sourceId_not_contains?: String;
  sourceId_starts_with?: String;
  sourceId_not_starts_with?: String;
  sourceId_ends_with?: String;
  sourceId_not_ends_with?: String;
  sourceToken?: String;
  sourceToken_not?: String;
  sourceToken_in?: String[] | String;
  sourceToken_not_in?: String[] | String;
  sourceToken_lt?: String;
  sourceToken_lte?: String;
  sourceToken_gt?: String;
  sourceToken_gte?: String;
  sourceToken_contains?: String;
  sourceToken_not_contains?: String;
  sourceToken_starts_with?: String;
  sourceToken_not_starts_with?: String;
  sourceToken_ends_with?: String;
  sourceToken_not_ends_with?: String;
  sourceType?: SourceType;
  sourceType_not?: SourceType;
  sourceType_in?: SourceType[] | SourceType;
  sourceType_not_in?: SourceType[] | SourceType;
  AND?: SourceNetworkScalarWhereInput[] | SourceNetworkScalarWhereInput;
  OR?: SourceNetworkScalarWhereInput[] | SourceNetworkScalarWhereInput;
  NOT?: SourceNetworkScalarWhereInput[] | SourceNetworkScalarWhereInput;
}

export interface VoteUpsertWithWhereUniqueWithoutVoteCountInput {
  where: VoteWhereUniqueInput;
  update: VoteUpdateWithoutVoteCountDataInput;
  create: VoteCreateWithoutVoteCountInput;
}

export interface SourceNetworkUpdateManyWithWhereNestedInput {
  where: SourceNetworkScalarWhereInput;
  data: SourceNetworkUpdateManyDataInput;
}

export interface VoteUpdateWithWhereUniqueWithoutVoteCountInput {
  where: VoteWhereUniqueInput;
  data: VoteUpdateWithoutVoteCountDataInput;
}

export interface SourceNetworkUpdateManyDataInput {
  sourceId?: String;
  sourceToken?: String;
  sourceType?: SourceType;
}

export interface VoteCountSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: VoteCountWhereInput;
  AND?: VoteCountSubscriptionWhereInput[] | VoteCountSubscriptionWhereInput;
  OR?: VoteCountSubscriptionWhereInput[] | VoteCountSubscriptionWhereInput;
  NOT?: VoteCountSubscriptionWhereInput[] | VoteCountSubscriptionWhereInput;
}

export interface UserUpdateManyMutationInput {
  name?: String;
  email?: String;
  avatarUrl?: String;
  title?: String;
  displayName?: String;
  timezone?: String;
  timezoneLabel?: String;
}

export interface SourceNetworkSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SourceNetworkWhereInput;
  AND?:
    | SourceNetworkSubscriptionWhereInput[]
    | SourceNetworkSubscriptionWhereInput;
  OR?:
    | SourceNetworkSubscriptionWhereInput[]
    | SourceNetworkSubscriptionWhereInput;
  NOT?:
    | SourceNetworkSubscriptionWhereInput[]
    | SourceNetworkSubscriptionWhereInput;
}

export interface VoteCountCreateInput {
  resourceId: ID_Input;
  upvotes?: Int;
  downvotes?: Int;
  total?: Int;
  votes?: VoteCreateManyWithoutVoteCountInput;
}

export interface VoteUpdateWithoutUserDataInput {
  vote?: VoteType;
  voteCount?: VoteCountUpdateOneRequiredWithoutVotesInput;
}

export interface VoterCreateOneWithoutVotesInput {
  create?: VoterCreateWithoutVotesInput;
  connect?: VoterWhereUniqueInput;
}

export interface VoterWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  avatarUrl?: String;
  avatarUrl_not?: String;
  avatarUrl_in?: String[] | String;
  avatarUrl_not_in?: String[] | String;
  avatarUrl_lt?: String;
  avatarUrl_lte?: String;
  avatarUrl_gt?: String;
  avatarUrl_gte?: String;
  avatarUrl_contains?: String;
  avatarUrl_not_contains?: String;
  avatarUrl_starts_with?: String;
  avatarUrl_not_starts_with?: String;
  avatarUrl_ends_with?: String;
  avatarUrl_not_ends_with?: String;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  displayName?: String;
  displayName_not?: String;
  displayName_in?: String[] | String;
  displayName_not_in?: String[] | String;
  displayName_lt?: String;
  displayName_lte?: String;
  displayName_gt?: String;
  displayName_gte?: String;
  displayName_contains?: String;
  displayName_not_contains?: String;
  displayName_starts_with?: String;
  displayName_not_starts_with?: String;
  displayName_ends_with?: String;
  displayName_not_ends_with?: String;
  timezone?: String;
  timezone_not?: String;
  timezone_in?: String[] | String;
  timezone_not_in?: String[] | String;
  timezone_lt?: String;
  timezone_lte?: String;
  timezone_gt?: String;
  timezone_gte?: String;
  timezone_contains?: String;
  timezone_not_contains?: String;
  timezone_starts_with?: String;
  timezone_not_starts_with?: String;
  timezone_ends_with?: String;
  timezone_not_ends_with?: String;
  timezoneLabel?: String;
  timezoneLabel_not?: String;
  timezoneLabel_in?: String[] | String;
  timezoneLabel_not_in?: String[] | String;
  timezoneLabel_lt?: String;
  timezoneLabel_lte?: String;
  timezoneLabel_gt?: String;
  timezoneLabel_gte?: String;
  timezoneLabel_contains?: String;
  timezoneLabel_not_contains?: String;
  timezoneLabel_starts_with?: String;
  timezoneLabel_not_starts_with?: String;
  timezoneLabel_ends_with?: String;
  timezoneLabel_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  resourceId?: ID_Input;
  resourceId_not?: ID_Input;
  resourceId_in?: ID_Input[] | ID_Input;
  resourceId_not_in?: ID_Input[] | ID_Input;
  resourceId_lt?: ID_Input;
  resourceId_lte?: ID_Input;
  resourceId_gt?: ID_Input;
  resourceId_gte?: ID_Input;
  resourceId_contains?: ID_Input;
  resourceId_not_contains?: ID_Input;
  resourceId_starts_with?: ID_Input;
  resourceId_not_starts_with?: ID_Input;
  resourceId_ends_with?: ID_Input;
  resourceId_not_ends_with?: ID_Input;
  votes_every?: VoteWhereInput;
  votes_some?: VoteWhereInput;
  votes_none?: VoteWhereInput;
  AND?: VoterWhereInput[] | VoterWhereInput;
  OR?: VoterWhereInput[] | VoterWhereInput;
  NOT?: VoterWhereInput[] | VoterWhereInput;
}

export interface VoterCreateWithoutVotesInput {
  name: String;
  email?: String;
  avatarUrl?: String;
  title?: String;
  displayName?: String;
  timezone?: String;
  timezoneLabel?: String;
  resourceId: ID_Input;
}

export interface VoteCreateManyWithoutUserInput {
  create?: VoteCreateWithoutUserInput[] | VoteCreateWithoutUserInput;
  connect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
}

export interface VoteCountCreateOneWithoutVotesInput {
  create?: VoteCountCreateWithoutVotesInput;
  connect?: VoteCountWhereUniqueInput;
}

export interface SourceNetworkWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  sourceId?: String;
  sourceId_not?: String;
  sourceId_in?: String[] | String;
  sourceId_not_in?: String[] | String;
  sourceId_lt?: String;
  sourceId_lte?: String;
  sourceId_gt?: String;
  sourceId_gte?: String;
  sourceId_contains?: String;
  sourceId_not_contains?: String;
  sourceId_starts_with?: String;
  sourceId_not_starts_with?: String;
  sourceId_ends_with?: String;
  sourceId_not_ends_with?: String;
  sourceToken?: String;
  sourceToken_not?: String;
  sourceToken_in?: String[] | String;
  sourceToken_not_in?: String[] | String;
  sourceToken_lt?: String;
  sourceToken_lte?: String;
  sourceToken_gt?: String;
  sourceToken_gte?: String;
  sourceToken_contains?: String;
  sourceToken_not_contains?: String;
  sourceToken_starts_with?: String;
  sourceToken_not_starts_with?: String;
  sourceToken_ends_with?: String;
  sourceToken_not_ends_with?: String;
  sourceType?: SourceType;
  sourceType_not?: SourceType;
  sourceType_in?: SourceType[] | SourceType;
  sourceType_not_in?: SourceType[] | SourceType;
  AND?: SourceNetworkWhereInput[] | SourceNetworkWhereInput;
  OR?: SourceNetworkWhereInput[] | SourceNetworkWhereInput;
  NOT?: SourceNetworkWhereInput[] | SourceNetworkWhereInput;
}

export interface VoteCountCreateWithoutVotesInput {
  resourceId: ID_Input;
  upvotes?: Int;
  downvotes?: Int;
  total?: Int;
}

export type VoterWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface VoteUpdateInput {
  vote?: VoteType;
  user?: VoterUpdateOneRequiredWithoutVotesInput;
  voteCount?: VoteCountUpdateOneRequiredWithoutVotesInput;
}

export interface VoterSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: VoterWhereInput;
  AND?: VoterSubscriptionWhereInput[] | VoterSubscriptionWhereInput;
  OR?: VoterSubscriptionWhereInput[] | VoterSubscriptionWhereInput;
  NOT?: VoterSubscriptionWhereInput[] | VoterSubscriptionWhereInput;
}

export interface VoterUpdateOneRequiredWithoutVotesInput {
  create?: VoterCreateWithoutVotesInput;
  update?: VoterUpdateWithoutVotesDataInput;
  upsert?: VoterUpsertWithoutVotesInput;
  connect?: VoterWhereUniqueInput;
}

export interface VoteUpsertWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput;
  update: VoteUpdateWithoutUserDataInput;
  create: VoteCreateWithoutUserInput;
}

export interface VoterUpdateWithoutVotesDataInput {
  name?: String;
  email?: String;
  avatarUrl?: String;
  title?: String;
  displayName?: String;
  timezone?: String;
  timezoneLabel?: String;
  resourceId?: ID_Input;
}

export interface VoterUpdateInput {
  name?: String;
  email?: String;
  avatarUrl?: String;
  title?: String;
  displayName?: String;
  timezone?: String;
  timezoneLabel?: String;
  resourceId?: ID_Input;
  votes?: VoteUpdateManyWithoutUserInput;
}

export interface VoteCountUpsertWithoutVotesInput {
  update: VoteCountUpdateWithoutVotesDataInput;
  create: VoteCountCreateWithoutVotesInput;
}

export interface VoteCountUpdateWithoutVotesDataInput {
  resourceId?: ID_Input;
  upvotes?: Int;
  downvotes?: Int;
  total?: Int;
}

export interface VoteCountUpdateOneRequiredWithoutVotesInput {
  create?: VoteCountCreateWithoutVotesInput;
  update?: VoteCountUpdateWithoutVotesDataInput;
  upsert?: VoteCountUpsertWithoutVotesInput;
  connect?: VoteCountWhereUniqueInput;
}

export interface VoterUpsertWithoutVotesInput {
  update: VoterUpdateWithoutVotesDataInput;
  create: VoterCreateWithoutVotesInput;
}

export interface VoteCountUpdateManyMutationInput {
  resourceId?: ID_Input;
  upvotes?: Int;
  downvotes?: Int;
  total?: Int;
}

export interface VoteUpdateManyWithoutUserInput {
  create?: VoteCreateWithoutUserInput[] | VoteCreateWithoutUserInput;
  delete?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  connect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  set?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  disconnect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  update?:
    | VoteUpdateWithWhereUniqueWithoutUserInput[]
    | VoteUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | VoteUpsertWithWhereUniqueWithoutUserInput[]
    | VoteUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?: VoteScalarWhereInput[] | VoteScalarWhereInput;
  updateMany?:
    | VoteUpdateManyWithWhereNestedInput[]
    | VoteUpdateManyWithWhereNestedInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  avatarUrl?: String;
  avatarUrl_not?: String;
  avatarUrl_in?: String[] | String;
  avatarUrl_not_in?: String[] | String;
  avatarUrl_lt?: String;
  avatarUrl_lte?: String;
  avatarUrl_gt?: String;
  avatarUrl_gte?: String;
  avatarUrl_contains?: String;
  avatarUrl_not_contains?: String;
  avatarUrl_starts_with?: String;
  avatarUrl_not_starts_with?: String;
  avatarUrl_ends_with?: String;
  avatarUrl_not_ends_with?: String;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  displayName?: String;
  displayName_not?: String;
  displayName_in?: String[] | String;
  displayName_not_in?: String[] | String;
  displayName_lt?: String;
  displayName_lte?: String;
  displayName_gt?: String;
  displayName_gte?: String;
  displayName_contains?: String;
  displayName_not_contains?: String;
  displayName_starts_with?: String;
  displayName_not_starts_with?: String;
  displayName_ends_with?: String;
  displayName_not_ends_with?: String;
  timezone?: String;
  timezone_not?: String;
  timezone_in?: String[] | String;
  timezone_not_in?: String[] | String;
  timezone_lt?: String;
  timezone_lte?: String;
  timezone_gt?: String;
  timezone_gte?: String;
  timezone_contains?: String;
  timezone_not_contains?: String;
  timezone_starts_with?: String;
  timezone_not_starts_with?: String;
  timezone_ends_with?: String;
  timezone_not_ends_with?: String;
  timezoneLabel?: String;
  timezoneLabel_not?: String;
  timezoneLabel_in?: String[] | String;
  timezoneLabel_not_in?: String[] | String;
  timezoneLabel_lt?: String;
  timezoneLabel_lte?: String;
  timezoneLabel_gt?: String;
  timezoneLabel_gte?: String;
  timezoneLabel_contains?: String;
  timezoneLabel_not_contains?: String;
  timezoneLabel_starts_with?: String;
  timezoneLabel_not_starts_with?: String;
  timezoneLabel_ends_with?: String;
  timezoneLabel_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  sources_every?: SourceNetworkWhereInput;
  sources_some?: SourceNetworkWhereInput;
  sources_none?: SourceNetworkWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface VoteUpdateWithoutVoteCountDataInput {
  vote?: VoteType;
  user?: VoterUpdateOneRequiredWithoutVotesInput;
}

export interface VoteUpdateManyWithWhereNestedInput {
  where: VoteScalarWhereInput;
  data: VoteUpdateManyDataInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface VoterPreviousValues {
  id: ID_Output;
  name: String;
  email?: String;
  avatarUrl?: String;
  title?: String;
  displayName?: String;
  timezone?: String;
  timezoneLabel?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  resourceId: ID_Output;
}

export interface VoterPreviousValuesPromise
  extends Promise<VoterPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  avatarUrl: () => Promise<String>;
  title: () => Promise<String>;
  displayName: () => Promise<String>;
  timezone: () => Promise<String>;
  timezoneLabel: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  resourceId: () => Promise<ID_Output>;
}

export interface VoterPreviousValuesSubscription
  extends Promise<AsyncIterator<VoterPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  avatarUrl: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  displayName: () => Promise<AsyncIterator<String>>;
  timezone: () => Promise<AsyncIterator<String>>;
  timezoneLabel: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  resourceId: () => Promise<AsyncIterator<ID_Output>>;
}

export interface Vote {
  id: ID_Output;
  vote: VoteType;
}

export interface VotePromise extends Promise<Vote>, Fragmentable {
  id: () => Promise<ID_Output>;
  vote: () => Promise<VoteType>;
  user: <T = VoterPromise>() => T;
  voteCount: <T = VoteCountPromise>() => T;
}

export interface VoteSubscription
  extends Promise<AsyncIterator<Vote>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  vote: () => Promise<AsyncIterator<VoteType>>;
  user: <T = VoterSubscription>() => T;
  voteCount: <T = VoteCountSubscription>() => T;
}

export interface SourceNetworkEdge {
  node: SourceNetwork;
  cursor: String;
}

export interface SourceNetworkEdgePromise
  extends Promise<SourceNetworkEdge>,
    Fragmentable {
  node: <T = SourceNetworkPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SourceNetworkEdgeSubscription
  extends Promise<AsyncIterator<SourceNetworkEdge>>,
    Fragmentable {
  node: <T = SourceNetworkSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface SourceNetworkConnection {
  pageInfo: PageInfo;
  edges: SourceNetworkEdge[];
}

export interface SourceNetworkConnectionPromise
  extends Promise<SourceNetworkConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SourceNetworkEdge>>() => T;
  aggregate: <T = AggregateSourceNetworkPromise>() => T;
}

export interface SourceNetworkConnectionSubscription
  extends Promise<AsyncIterator<SourceNetworkConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SourceNetworkEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSourceNetworkSubscription>() => T;
}

export interface User {
  id: ID_Output;
  name: String;
  email?: String;
  avatarUrl?: String;
  title?: String;
  displayName?: String;
  timezone?: String;
  timezoneLabel?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  avatarUrl: () => Promise<String>;
  title: () => Promise<String>;
  displayName: () => Promise<String>;
  timezone: () => Promise<String>;
  timezoneLabel: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  sources: <T = FragmentableArray<SourceNetwork>>(
    args?: {
      where?: SourceNetworkWhereInput;
      orderBy?: SourceNetworkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  avatarUrl: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  displayName: () => Promise<AsyncIterator<String>>;
  timezone: () => Promise<AsyncIterator<String>>;
  timezoneLabel: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  sources: <T = Promise<AsyncIterator<SourceNetworkSubscription>>>(
    args?: {
      where?: SourceNetworkWhereInput;
      orderBy?: SourceNetworkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface VoteCountPreviousValues {
  id: ID_Output;
  resourceId: ID_Output;
  upvotes: Int;
  downvotes: Int;
  total: Int;
}

export interface VoteCountPreviousValuesPromise
  extends Promise<VoteCountPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  resourceId: () => Promise<ID_Output>;
  upvotes: () => Promise<Int>;
  downvotes: () => Promise<Int>;
  total: () => Promise<Int>;
}

export interface VoteCountPreviousValuesSubscription
  extends Promise<AsyncIterator<VoteCountPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  resourceId: () => Promise<AsyncIterator<ID_Output>>;
  upvotes: () => Promise<AsyncIterator<Int>>;
  downvotes: () => Promise<AsyncIterator<Int>>;
  total: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface VoterEdge {
  node: Voter;
  cursor: String;
}

export interface VoterEdgePromise extends Promise<VoterEdge>, Fragmentable {
  node: <T = VoterPromise>() => T;
  cursor: () => Promise<String>;
}

export interface VoterEdgeSubscription
  extends Promise<AsyncIterator<VoterEdge>>,
    Fragmentable {
  node: <T = VoterSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface VoterSubscriptionPayload {
  mutation: MutationType;
  node: Voter;
  updatedFields: String[];
  previousValues: VoterPreviousValues;
}

export interface VoterSubscriptionPayloadPromise
  extends Promise<VoterSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = VoterPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VoterPreviousValuesPromise>() => T;
}

export interface VoterSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VoterSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VoterSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VoterPreviousValuesSubscription>() => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface VoteCountEdge {
  node: VoteCount;
  cursor: String;
}

export interface VoteCountEdgePromise
  extends Promise<VoteCountEdge>,
    Fragmentable {
  node: <T = VoteCountPromise>() => T;
  cursor: () => Promise<String>;
}

export interface VoteCountEdgeSubscription
  extends Promise<AsyncIterator<VoteCountEdge>>,
    Fragmentable {
  node: <T = VoteCountSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface SourceNetwork {
  id: ID_Output;
  sourceId: String;
  sourceToken?: String;
  sourceType?: SourceType;
}

export interface SourceNetworkPromise
  extends Promise<SourceNetwork>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  sourceId: () => Promise<String>;
  sourceToken: () => Promise<String>;
  sourceType: () => Promise<SourceType>;
}

export interface SourceNetworkSubscription
  extends Promise<AsyncIterator<SourceNetwork>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  sourceId: () => Promise<AsyncIterator<String>>;
  sourceToken: () => Promise<AsyncIterator<String>>;
  sourceType: () => Promise<AsyncIterator<SourceType>>;
}

export interface AggregateVote {
  count: Int;
}

export interface AggregateVotePromise
  extends Promise<AggregateVote>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVoteSubscription
  extends Promise<AsyncIterator<AggregateVote>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SourceNetworkSubscriptionPayload {
  mutation: MutationType;
  node: SourceNetwork;
  updatedFields: String[];
  previousValues: SourceNetworkPreviousValues;
}

export interface SourceNetworkSubscriptionPayloadPromise
  extends Promise<SourceNetworkSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SourceNetworkPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SourceNetworkPreviousValuesPromise>() => T;
}

export interface SourceNetworkSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SourceNetworkSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SourceNetworkSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SourceNetworkPreviousValuesSubscription>() => T;
}

export interface VoteConnection {
  pageInfo: PageInfo;
  edges: VoteEdge[];
}

export interface VoteConnectionPromise
  extends Promise<VoteConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<VoteEdge>>() => T;
  aggregate: <T = AggregateVotePromise>() => T;
}

export interface VoteConnectionSubscription
  extends Promise<AsyncIterator<VoteConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VoteEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVoteSubscription>() => T;
}

export interface SourceNetworkPreviousValues {
  id: ID_Output;
  sourceId: String;
  sourceToken?: String;
  sourceType?: SourceType;
}

export interface SourceNetworkPreviousValuesPromise
  extends Promise<SourceNetworkPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  sourceId: () => Promise<String>;
  sourceToken: () => Promise<String>;
  sourceType: () => Promise<SourceType>;
}

export interface SourceNetworkPreviousValuesSubscription
  extends Promise<AsyncIterator<SourceNetworkPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  sourceId: () => Promise<AsyncIterator<String>>;
  sourceToken: () => Promise<AsyncIterator<String>>;
  sourceType: () => Promise<AsyncIterator<SourceType>>;
}

export interface AggregateSourceNetwork {
  count: Int;
}

export interface AggregateSourceNetworkPromise
  extends Promise<AggregateSourceNetwork>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSourceNetworkSubscription
  extends Promise<AsyncIterator<AggregateSourceNetwork>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateVoter {
  count: Int;
}

export interface AggregateVoterPromise
  extends Promise<AggregateVoter>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVoterSubscription
  extends Promise<AsyncIterator<AggregateVoter>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface AggregateVoteCount {
  count: Int;
}

export interface AggregateVoteCountPromise
  extends Promise<AggregateVoteCount>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVoteCountSubscription
  extends Promise<AsyncIterator<AggregateVoteCount>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface VoteEdge {
  node: Vote;
  cursor: String;
}

export interface VoteEdgePromise extends Promise<VoteEdge>, Fragmentable {
  node: <T = VotePromise>() => T;
  cursor: () => Promise<String>;
}

export interface VoteEdgeSubscription
  extends Promise<AsyncIterator<VoteEdge>>,
    Fragmentable {
  node: <T = VoteSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface VotePreviousValues {
  id: ID_Output;
  vote: VoteType;
}

export interface VotePreviousValuesPromise
  extends Promise<VotePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  vote: () => Promise<VoteType>;
}

export interface VotePreviousValuesSubscription
  extends Promise<AsyncIterator<VotePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  vote: () => Promise<AsyncIterator<VoteType>>;
}

export interface VoteSubscriptionPayload {
  mutation: MutationType;
  node: Vote;
  updatedFields: String[];
  previousValues: VotePreviousValues;
}

export interface VoteSubscriptionPayloadPromise
  extends Promise<VoteSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = VotePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VotePreviousValuesPromise>() => T;
}

export interface VoteSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VoteSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VoteSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VotePreviousValuesSubscription>() => T;
}

export interface VoteCountSubscriptionPayload {
  mutation: MutationType;
  node: VoteCount;
  updatedFields: String[];
  previousValues: VoteCountPreviousValues;
}

export interface VoteCountSubscriptionPayloadPromise
  extends Promise<VoteCountSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = VoteCountPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VoteCountPreviousValuesPromise>() => T;
}

export interface VoteCountSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VoteCountSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VoteCountSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VoteCountPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email?: String;
  avatarUrl?: String;
  title?: String;
  displayName?: String;
  timezone?: String;
  timezoneLabel?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  avatarUrl: () => Promise<String>;
  title: () => Promise<String>;
  displayName: () => Promise<String>;
  timezone: () => Promise<String>;
  timezoneLabel: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  avatarUrl: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  displayName: () => Promise<AsyncIterator<String>>;
  timezone: () => Promise<AsyncIterator<String>>;
  timezoneLabel: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface VoteCount {
  id: ID_Output;
  resourceId: ID_Output;
  upvotes: Int;
  downvotes: Int;
  total: Int;
}

export interface VoteCountPromise extends Promise<VoteCount>, Fragmentable {
  id: () => Promise<ID_Output>;
  resourceId: () => Promise<ID_Output>;
  upvotes: () => Promise<Int>;
  downvotes: () => Promise<Int>;
  total: () => Promise<Int>;
  votes: <T = FragmentableArray<Vote>>(
    args?: {
      where?: VoteWhereInput;
      orderBy?: VoteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface VoteCountSubscription
  extends Promise<AsyncIterator<VoteCount>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  resourceId: () => Promise<AsyncIterator<ID_Output>>;
  upvotes: () => Promise<AsyncIterator<Int>>;
  downvotes: () => Promise<AsyncIterator<Int>>;
  total: () => Promise<AsyncIterator<Int>>;
  votes: <T = Promise<AsyncIterator<VoteSubscription>>>(
    args?: {
      where?: VoteWhereInput;
      orderBy?: VoteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface VoteCountConnection {
  pageInfo: PageInfo;
  edges: VoteCountEdge[];
}

export interface VoteCountConnectionPromise
  extends Promise<VoteCountConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<VoteCountEdge>>() => T;
  aggregate: <T = AggregateVoteCountPromise>() => T;
}

export interface VoteCountConnectionSubscription
  extends Promise<AsyncIterator<VoteCountConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VoteCountEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVoteCountSubscription>() => T;
}

export interface VoterConnection {
  pageInfo: PageInfo;
  edges: VoterEdge[];
}

export interface VoterConnectionPromise
  extends Promise<VoterConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<VoterEdge>>() => T;
  aggregate: <T = AggregateVoterPromise>() => T;
}

export interface VoterConnectionSubscription
  extends Promise<AsyncIterator<VoterConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VoterEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVoterSubscription>() => T;
}

export interface Voter {
  id: ID_Output;
  name: String;
  email?: String;
  avatarUrl?: String;
  title?: String;
  displayName?: String;
  timezone?: String;
  timezoneLabel?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  resourceId: ID_Output;
}

export interface VoterPromise extends Promise<Voter>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  avatarUrl: () => Promise<String>;
  title: () => Promise<String>;
  displayName: () => Promise<String>;
  timezone: () => Promise<String>;
  timezoneLabel: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  resourceId: () => Promise<ID_Output>;
  votes: <T = FragmentableArray<Vote>>(
    args?: {
      where?: VoteWhereInput;
      orderBy?: VoteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface VoterSubscription
  extends Promise<AsyncIterator<Voter>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  avatarUrl: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  displayName: () => Promise<AsyncIterator<String>>;
  timezone: () => Promise<AsyncIterator<String>>;
  timezoneLabel: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  resourceId: () => Promise<AsyncIterator<ID_Output>>;
  votes: <T = Promise<AsyncIterator<VoteSubscription>>>(
    args?: {
      where?: VoteWhereInput;
      orderBy?: VoteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "VoteCount",
    embedded: false
  },
  {
    name: "Vote",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Voter",
    embedded: false
  },
  {
    name: "SourceNetwork",
    embedded: false
  },
  {
    name: "OrderType",
    embedded: false
  },
  {
    name: "VoteType",
    embedded: false
  },
  {
    name: "SourceType",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://${process.env["PRISMA_ENDPOINT"]}/core/${
    process.env["PRISMA_ENV"]
  }`
});
export const prisma = new Prisma();
