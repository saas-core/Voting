// Code generated by Prisma (prisma@1.27.4). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateSourceNetwork {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVote {
  count: Int!
}

type AggregateVoteCount {
  count: Int!
}

type AggregateVoter {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createSourceNetwork(data: SourceNetworkCreateInput!): SourceNetwork!
  updateSourceNetwork(data: SourceNetworkUpdateInput!, where: SourceNetworkWhereUniqueInput!): SourceNetwork
  updateManySourceNetworks(data: SourceNetworkUpdateManyMutationInput!, where: SourceNetworkWhereInput): BatchPayload!
  upsertSourceNetwork(where: SourceNetworkWhereUniqueInput!, create: SourceNetworkCreateInput!, update: SourceNetworkUpdateInput!): SourceNetwork!
  deleteSourceNetwork(where: SourceNetworkWhereUniqueInput!): SourceNetwork
  deleteManySourceNetworks(where: SourceNetworkWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createVote(data: VoteCreateInput!): Vote!
  updateVote(data: VoteUpdateInput!, where: VoteWhereUniqueInput!): Vote
  updateManyVotes(data: VoteUpdateManyMutationInput!, where: VoteWhereInput): BatchPayload!
  upsertVote(where: VoteWhereUniqueInput!, create: VoteCreateInput!, update: VoteUpdateInput!): Vote!
  deleteVote(where: VoteWhereUniqueInput!): Vote
  deleteManyVotes(where: VoteWhereInput): BatchPayload!
  createVoteCount(data: VoteCountCreateInput!): VoteCount!
  updateVoteCount(data: VoteCountUpdateInput!, where: VoteCountWhereUniqueInput!): VoteCount
  updateManyVoteCounts(data: VoteCountUpdateManyMutationInput!, where: VoteCountWhereInput): BatchPayload!
  upsertVoteCount(where: VoteCountWhereUniqueInput!, create: VoteCountCreateInput!, update: VoteCountUpdateInput!): VoteCount!
  deleteVoteCount(where: VoteCountWhereUniqueInput!): VoteCount
  deleteManyVoteCounts(where: VoteCountWhereInput): BatchPayload!
  createVoter(data: VoterCreateInput!): Voter!
  updateVoter(data: VoterUpdateInput!, where: VoterWhereUniqueInput!): Voter
  updateManyVoters(data: VoterUpdateManyMutationInput!, where: VoterWhereInput): BatchPayload!
  upsertVoter(where: VoterWhereUniqueInput!, create: VoterCreateInput!, update: VoterUpdateInput!): Voter!
  deleteVoter(where: VoterWhereUniqueInput!): Voter
  deleteManyVoters(where: VoterWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  sourceNetwork(where: SourceNetworkWhereUniqueInput!): SourceNetwork
  sourceNetworks(where: SourceNetworkWhereInput, orderBy: SourceNetworkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SourceNetwork]!
  sourceNetworksConnection(where: SourceNetworkWhereInput, orderBy: SourceNetworkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SourceNetworkConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  vote(where: VoteWhereUniqueInput!): Vote
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote]!
  votesConnection(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VoteConnection!
  voteCount(where: VoteCountWhereUniqueInput!): VoteCount
  voteCounts(where: VoteCountWhereInput, orderBy: VoteCountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [VoteCount]!
  voteCountsConnection(where: VoteCountWhereInput, orderBy: VoteCountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VoteCountConnection!
  voter(where: VoterWhereUniqueInput!): Voter
  voters(where: VoterWhereInput, orderBy: VoterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Voter]!
  votersConnection(where: VoterWhereInput, orderBy: VoterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VoterConnection!
  node(id: ID!): Node
}

type SourceNetwork {
  id: ID!
  sourceId: String!
  sourceToken: String
  sourceType: SourceType
}

type SourceNetworkConnection {
  pageInfo: PageInfo!
  edges: [SourceNetworkEdge]!
  aggregate: AggregateSourceNetwork!
}

input SourceNetworkCreateInput {
  sourceId: String!
  sourceToken: String
  sourceType: SourceType
}

input SourceNetworkCreateManyInput {
  create: [SourceNetworkCreateInput!]
  connect: [SourceNetworkWhereUniqueInput!]
}

type SourceNetworkEdge {
  node: SourceNetwork!
  cursor: String!
}

enum SourceNetworkOrderByInput {
  id_ASC
  id_DESC
  sourceId_ASC
  sourceId_DESC
  sourceToken_ASC
  sourceToken_DESC
  sourceType_ASC
  sourceType_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SourceNetworkPreviousValues {
  id: ID!
  sourceId: String!
  sourceToken: String
  sourceType: SourceType
}

input SourceNetworkScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  sourceId: String
  sourceId_not: String
  sourceId_in: [String!]
  sourceId_not_in: [String!]
  sourceId_lt: String
  sourceId_lte: String
  sourceId_gt: String
  sourceId_gte: String
  sourceId_contains: String
  sourceId_not_contains: String
  sourceId_starts_with: String
  sourceId_not_starts_with: String
  sourceId_ends_with: String
  sourceId_not_ends_with: String
  sourceToken: String
  sourceToken_not: String
  sourceToken_in: [String!]
  sourceToken_not_in: [String!]
  sourceToken_lt: String
  sourceToken_lte: String
  sourceToken_gt: String
  sourceToken_gte: String
  sourceToken_contains: String
  sourceToken_not_contains: String
  sourceToken_starts_with: String
  sourceToken_not_starts_with: String
  sourceToken_ends_with: String
  sourceToken_not_ends_with: String
  sourceType: SourceType
  sourceType_not: SourceType
  sourceType_in: [SourceType!]
  sourceType_not_in: [SourceType!]
  AND: [SourceNetworkScalarWhereInput!]
  OR: [SourceNetworkScalarWhereInput!]
  NOT: [SourceNetworkScalarWhereInput!]
}

type SourceNetworkSubscriptionPayload {
  mutation: MutationType!
  node: SourceNetwork
  updatedFields: [String!]
  previousValues: SourceNetworkPreviousValues
}

input SourceNetworkSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SourceNetworkWhereInput
  AND: [SourceNetworkSubscriptionWhereInput!]
  OR: [SourceNetworkSubscriptionWhereInput!]
  NOT: [SourceNetworkSubscriptionWhereInput!]
}

input SourceNetworkUpdateDataInput {
  sourceId: String
  sourceToken: String
  sourceType: SourceType
}

input SourceNetworkUpdateInput {
  sourceId: String
  sourceToken: String
  sourceType: SourceType
}

input SourceNetworkUpdateManyDataInput {
  sourceId: String
  sourceToken: String
  sourceType: SourceType
}

input SourceNetworkUpdateManyInput {
  create: [SourceNetworkCreateInput!]
  update: [SourceNetworkUpdateWithWhereUniqueNestedInput!]
  upsert: [SourceNetworkUpsertWithWhereUniqueNestedInput!]
  delete: [SourceNetworkWhereUniqueInput!]
  connect: [SourceNetworkWhereUniqueInput!]
  set: [SourceNetworkWhereUniqueInput!]
  disconnect: [SourceNetworkWhereUniqueInput!]
  deleteMany: [SourceNetworkScalarWhereInput!]
  updateMany: [SourceNetworkUpdateManyWithWhereNestedInput!]
}

input SourceNetworkUpdateManyMutationInput {
  sourceId: String
  sourceToken: String
  sourceType: SourceType
}

input SourceNetworkUpdateManyWithWhereNestedInput {
  where: SourceNetworkScalarWhereInput!
  data: SourceNetworkUpdateManyDataInput!
}

input SourceNetworkUpdateWithWhereUniqueNestedInput {
  where: SourceNetworkWhereUniqueInput!
  data: SourceNetworkUpdateDataInput!
}

input SourceNetworkUpsertWithWhereUniqueNestedInput {
  where: SourceNetworkWhereUniqueInput!
  update: SourceNetworkUpdateDataInput!
  create: SourceNetworkCreateInput!
}

input SourceNetworkWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  sourceId: String
  sourceId_not: String
  sourceId_in: [String!]
  sourceId_not_in: [String!]
  sourceId_lt: String
  sourceId_lte: String
  sourceId_gt: String
  sourceId_gte: String
  sourceId_contains: String
  sourceId_not_contains: String
  sourceId_starts_with: String
  sourceId_not_starts_with: String
  sourceId_ends_with: String
  sourceId_not_ends_with: String
  sourceToken: String
  sourceToken_not: String
  sourceToken_in: [String!]
  sourceToken_not_in: [String!]
  sourceToken_lt: String
  sourceToken_lte: String
  sourceToken_gt: String
  sourceToken_gte: String
  sourceToken_contains: String
  sourceToken_not_contains: String
  sourceToken_starts_with: String
  sourceToken_not_starts_with: String
  sourceToken_ends_with: String
  sourceToken_not_ends_with: String
  sourceType: SourceType
  sourceType_not: SourceType
  sourceType_in: [SourceType!]
  sourceType_not_in: [SourceType!]
  AND: [SourceNetworkWhereInput!]
  OR: [SourceNetworkWhereInput!]
  NOT: [SourceNetworkWhereInput!]
}

input SourceNetworkWhereUniqueInput {
  id: ID
}

enum SourceType {
  SLACK
}

type Subscription {
  sourceNetwork(where: SourceNetworkSubscriptionWhereInput): SourceNetworkSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  vote(where: VoteSubscriptionWhereInput): VoteSubscriptionPayload
  voteCount(where: VoteCountSubscriptionWhereInput): VoteCountSubscriptionPayload
  voter(where: VoterSubscriptionWhereInput): VoterSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  email: String
  avatarUrl: String
  title: String
  displayName: String
  timezone: String
  timezoneLabel: String
  createdAt: DateTime!
  updatedAt: DateTime!
  sources(where: SourceNetworkWhereInput, orderBy: SourceNetworkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SourceNetwork!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String
  avatarUrl: String
  title: String
  displayName: String
  timezone: String
  timezoneLabel: String
  sources: SourceNetworkCreateManyInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  avatarUrl_ASC
  avatarUrl_DESC
  title_ASC
  title_DESC
  displayName_ASC
  displayName_DESC
  timezone_ASC
  timezone_DESC
  timezoneLabel_ASC
  timezoneLabel_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String
  avatarUrl: String
  title: String
  displayName: String
  timezone: String
  timezoneLabel: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  email: String
  avatarUrl: String
  title: String
  displayName: String
  timezone: String
  timezoneLabel: String
  sources: SourceNetworkUpdateManyInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  avatarUrl: String
  title: String
  displayName: String
  timezone: String
  timezoneLabel: String
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  avatarUrl: String
  avatarUrl_not: String
  avatarUrl_in: [String!]
  avatarUrl_not_in: [String!]
  avatarUrl_lt: String
  avatarUrl_lte: String
  avatarUrl_gt: String
  avatarUrl_gte: String
  avatarUrl_contains: String
  avatarUrl_not_contains: String
  avatarUrl_starts_with: String
  avatarUrl_not_starts_with: String
  avatarUrl_ends_with: String
  avatarUrl_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  displayName: String
  displayName_not: String
  displayName_in: [String!]
  displayName_not_in: [String!]
  displayName_lt: String
  displayName_lte: String
  displayName_gt: String
  displayName_gte: String
  displayName_contains: String
  displayName_not_contains: String
  displayName_starts_with: String
  displayName_not_starts_with: String
  displayName_ends_with: String
  displayName_not_ends_with: String
  timezone: String
  timezone_not: String
  timezone_in: [String!]
  timezone_not_in: [String!]
  timezone_lt: String
  timezone_lte: String
  timezone_gt: String
  timezone_gte: String
  timezone_contains: String
  timezone_not_contains: String
  timezone_starts_with: String
  timezone_not_starts_with: String
  timezone_ends_with: String
  timezone_not_ends_with: String
  timezoneLabel: String
  timezoneLabel_not: String
  timezoneLabel_in: [String!]
  timezoneLabel_not_in: [String!]
  timezoneLabel_lt: String
  timezoneLabel_lte: String
  timezoneLabel_gt: String
  timezoneLabel_gte: String
  timezoneLabel_contains: String
  timezoneLabel_not_contains: String
  timezoneLabel_starts_with: String
  timezoneLabel_not_starts_with: String
  timezoneLabel_ends_with: String
  timezoneLabel_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  sources_every: SourceNetworkWhereInput
  sources_some: SourceNetworkWhereInput
  sources_none: SourceNetworkWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
}

type Vote {
  id: ID!
  vote: VoteType!
  user: Voter!
  voteCount: VoteCount!
}

type VoteConnection {
  pageInfo: PageInfo!
  edges: [VoteEdge]!
  aggregate: AggregateVote!
}

type VoteCount {
  id: ID!
  resourceId: ID!
  upvotes: Int!
  downvotes: Int!
  total: Int!
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
}

type VoteCountConnection {
  pageInfo: PageInfo!
  edges: [VoteCountEdge]!
  aggregate: AggregateVoteCount!
}

input VoteCountCreateInput {
  resourceId: ID!
  upvotes: Int
  downvotes: Int
  total: Int
  votes: VoteCreateManyWithoutVoteCountInput
}

input VoteCountCreateOneWithoutVotesInput {
  create: VoteCountCreateWithoutVotesInput
  connect: VoteCountWhereUniqueInput
}

input VoteCountCreateWithoutVotesInput {
  resourceId: ID!
  upvotes: Int
  downvotes: Int
  total: Int
}

type VoteCountEdge {
  node: VoteCount!
  cursor: String!
}

enum VoteCountOrderByInput {
  id_ASC
  id_DESC
  resourceId_ASC
  resourceId_DESC
  upvotes_ASC
  upvotes_DESC
  downvotes_ASC
  downvotes_DESC
  total_ASC
  total_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type VoteCountPreviousValues {
  id: ID!
  resourceId: ID!
  upvotes: Int!
  downvotes: Int!
  total: Int!
}

type VoteCountSubscriptionPayload {
  mutation: MutationType!
  node: VoteCount
  updatedFields: [String!]
  previousValues: VoteCountPreviousValues
}

input VoteCountSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: VoteCountWhereInput
  AND: [VoteCountSubscriptionWhereInput!]
  OR: [VoteCountSubscriptionWhereInput!]
  NOT: [VoteCountSubscriptionWhereInput!]
}

input VoteCountUpdateInput {
  resourceId: ID
  upvotes: Int
  downvotes: Int
  total: Int
  votes: VoteUpdateManyWithoutVoteCountInput
}

input VoteCountUpdateManyMutationInput {
  resourceId: ID
  upvotes: Int
  downvotes: Int
  total: Int
}

input VoteCountUpdateOneRequiredWithoutVotesInput {
  create: VoteCountCreateWithoutVotesInput
  update: VoteCountUpdateWithoutVotesDataInput
  upsert: VoteCountUpsertWithoutVotesInput
  connect: VoteCountWhereUniqueInput
}

input VoteCountUpdateWithoutVotesDataInput {
  resourceId: ID
  upvotes: Int
  downvotes: Int
  total: Int
}

input VoteCountUpsertWithoutVotesInput {
  update: VoteCountUpdateWithoutVotesDataInput!
  create: VoteCountCreateWithoutVotesInput!
}

input VoteCountWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  resourceId: ID
  resourceId_not: ID
  resourceId_in: [ID!]
  resourceId_not_in: [ID!]
  resourceId_lt: ID
  resourceId_lte: ID
  resourceId_gt: ID
  resourceId_gte: ID
  resourceId_contains: ID
  resourceId_not_contains: ID
  resourceId_starts_with: ID
  resourceId_not_starts_with: ID
  resourceId_ends_with: ID
  resourceId_not_ends_with: ID
  upvotes: Int
  upvotes_not: Int
  upvotes_in: [Int!]
  upvotes_not_in: [Int!]
  upvotes_lt: Int
  upvotes_lte: Int
  upvotes_gt: Int
  upvotes_gte: Int
  downvotes: Int
  downvotes_not: Int
  downvotes_in: [Int!]
  downvotes_not_in: [Int!]
  downvotes_lt: Int
  downvotes_lte: Int
  downvotes_gt: Int
  downvotes_gte: Int
  total: Int
  total_not: Int
  total_in: [Int!]
  total_not_in: [Int!]
  total_lt: Int
  total_lte: Int
  total_gt: Int
  total_gte: Int
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
  AND: [VoteCountWhereInput!]
  OR: [VoteCountWhereInput!]
  NOT: [VoteCountWhereInput!]
}

input VoteCountWhereUniqueInput {
  id: ID
}

input VoteCreateInput {
  vote: VoteType!
  user: VoterCreateOneWithoutVotesInput!
  voteCount: VoteCountCreateOneWithoutVotesInput!
}

input VoteCreateManyWithoutUserInput {
  create: [VoteCreateWithoutUserInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateManyWithoutVoteCountInput {
  create: [VoteCreateWithoutVoteCountInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateWithoutUserInput {
  vote: VoteType!
  voteCount: VoteCountCreateOneWithoutVotesInput!
}

input VoteCreateWithoutVoteCountInput {
  vote: VoteType!
  user: VoterCreateOneWithoutVotesInput!
}

type VoteEdge {
  node: Vote!
  cursor: String!
}

enum VoteOrderByInput {
  id_ASC
  id_DESC
  vote_ASC
  vote_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type VotePreviousValues {
  id: ID!
  vote: VoteType!
}

type Voter {
  id: ID!
  name: String!
  email: String
  avatarUrl: String
  title: String
  displayName: String
  timezone: String
  timezoneLabel: String
  createdAt: DateTime!
  updatedAt: DateTime!
  resourceId: ID!
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
}

type VoterConnection {
  pageInfo: PageInfo!
  edges: [VoterEdge]!
  aggregate: AggregateVoter!
}

input VoterCreateInput {
  name: String!
  email: String
  avatarUrl: String
  title: String
  displayName: String
  timezone: String
  timezoneLabel: String
  resourceId: ID!
  votes: VoteCreateManyWithoutUserInput
}

input VoterCreateOneWithoutVotesInput {
  create: VoterCreateWithoutVotesInput
  connect: VoterWhereUniqueInput
}

input VoterCreateWithoutVotesInput {
  name: String!
  email: String
  avatarUrl: String
  title: String
  displayName: String
  timezone: String
  timezoneLabel: String
  resourceId: ID!
}

type VoterEdge {
  node: Voter!
  cursor: String!
}

enum VoterOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  avatarUrl_ASC
  avatarUrl_DESC
  title_ASC
  title_DESC
  displayName_ASC
  displayName_DESC
  timezone_ASC
  timezone_DESC
  timezoneLabel_ASC
  timezoneLabel_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  resourceId_ASC
  resourceId_DESC
}

type VoterPreviousValues {
  id: ID!
  name: String!
  email: String
  avatarUrl: String
  title: String
  displayName: String
  timezone: String
  timezoneLabel: String
  createdAt: DateTime!
  updatedAt: DateTime!
  resourceId: ID!
}

type VoterSubscriptionPayload {
  mutation: MutationType!
  node: Voter
  updatedFields: [String!]
  previousValues: VoterPreviousValues
}

input VoterSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: VoterWhereInput
  AND: [VoterSubscriptionWhereInput!]
  OR: [VoterSubscriptionWhereInput!]
  NOT: [VoterSubscriptionWhereInput!]
}

input VoterUpdateInput {
  name: String
  email: String
  avatarUrl: String
  title: String
  displayName: String
  timezone: String
  timezoneLabel: String
  resourceId: ID
  votes: VoteUpdateManyWithoutUserInput
}

input VoterUpdateManyMutationInput {
  name: String
  email: String
  avatarUrl: String
  title: String
  displayName: String
  timezone: String
  timezoneLabel: String
  resourceId: ID
}

input VoterUpdateOneRequiredWithoutVotesInput {
  create: VoterCreateWithoutVotesInput
  update: VoterUpdateWithoutVotesDataInput
  upsert: VoterUpsertWithoutVotesInput
  connect: VoterWhereUniqueInput
}

input VoterUpdateWithoutVotesDataInput {
  name: String
  email: String
  avatarUrl: String
  title: String
  displayName: String
  timezone: String
  timezoneLabel: String
  resourceId: ID
}

input VoterUpsertWithoutVotesInput {
  update: VoterUpdateWithoutVotesDataInput!
  create: VoterCreateWithoutVotesInput!
}

input VoterWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  avatarUrl: String
  avatarUrl_not: String
  avatarUrl_in: [String!]
  avatarUrl_not_in: [String!]
  avatarUrl_lt: String
  avatarUrl_lte: String
  avatarUrl_gt: String
  avatarUrl_gte: String
  avatarUrl_contains: String
  avatarUrl_not_contains: String
  avatarUrl_starts_with: String
  avatarUrl_not_starts_with: String
  avatarUrl_ends_with: String
  avatarUrl_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  displayName: String
  displayName_not: String
  displayName_in: [String!]
  displayName_not_in: [String!]
  displayName_lt: String
  displayName_lte: String
  displayName_gt: String
  displayName_gte: String
  displayName_contains: String
  displayName_not_contains: String
  displayName_starts_with: String
  displayName_not_starts_with: String
  displayName_ends_with: String
  displayName_not_ends_with: String
  timezone: String
  timezone_not: String
  timezone_in: [String!]
  timezone_not_in: [String!]
  timezone_lt: String
  timezone_lte: String
  timezone_gt: String
  timezone_gte: String
  timezone_contains: String
  timezone_not_contains: String
  timezone_starts_with: String
  timezone_not_starts_with: String
  timezone_ends_with: String
  timezone_not_ends_with: String
  timezoneLabel: String
  timezoneLabel_not: String
  timezoneLabel_in: [String!]
  timezoneLabel_not_in: [String!]
  timezoneLabel_lt: String
  timezoneLabel_lte: String
  timezoneLabel_gt: String
  timezoneLabel_gte: String
  timezoneLabel_contains: String
  timezoneLabel_not_contains: String
  timezoneLabel_starts_with: String
  timezoneLabel_not_starts_with: String
  timezoneLabel_ends_with: String
  timezoneLabel_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  resourceId: ID
  resourceId_not: ID
  resourceId_in: [ID!]
  resourceId_not_in: [ID!]
  resourceId_lt: ID
  resourceId_lte: ID
  resourceId_gt: ID
  resourceId_gte: ID
  resourceId_contains: ID
  resourceId_not_contains: ID
  resourceId_starts_with: ID
  resourceId_not_starts_with: ID
  resourceId_ends_with: ID
  resourceId_not_ends_with: ID
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
  AND: [VoterWhereInput!]
  OR: [VoterWhereInput!]
  NOT: [VoterWhereInput!]
}

input VoterWhereUniqueInput {
  id: ID
}

input VoteScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  vote: VoteType
  vote_not: VoteType
  vote_in: [VoteType!]
  vote_not_in: [VoteType!]
  AND: [VoteScalarWhereInput!]
  OR: [VoteScalarWhereInput!]
  NOT: [VoteScalarWhereInput!]
}

type VoteSubscriptionPayload {
  mutation: MutationType!
  node: Vote
  updatedFields: [String!]
  previousValues: VotePreviousValues
}

input VoteSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: VoteWhereInput
  AND: [VoteSubscriptionWhereInput!]
  OR: [VoteSubscriptionWhereInput!]
  NOT: [VoteSubscriptionWhereInput!]
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

input VoteUpdateInput {
  vote: VoteType
  user: VoterUpdateOneRequiredWithoutVotesInput
  voteCount: VoteCountUpdateOneRequiredWithoutVotesInput
}

input VoteUpdateManyDataInput {
  vote: VoteType
}

input VoteUpdateManyMutationInput {
  vote: VoteType
}

input VoteUpdateManyWithoutUserInput {
  create: [VoteCreateWithoutUserInput!]
  delete: [VoteWhereUniqueInput!]
  connect: [VoteWhereUniqueInput!]
  set: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [VoteScalarWhereInput!]
  updateMany: [VoteUpdateManyWithWhereNestedInput!]
}

input VoteUpdateManyWithoutVoteCountInput {
  create: [VoteCreateWithoutVoteCountInput!]
  delete: [VoteWhereUniqueInput!]
  connect: [VoteWhereUniqueInput!]
  set: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutVoteCountInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutVoteCountInput!]
  deleteMany: [VoteScalarWhereInput!]
  updateMany: [VoteUpdateManyWithWhereNestedInput!]
}

input VoteUpdateManyWithWhereNestedInput {
  where: VoteScalarWhereInput!
  data: VoteUpdateManyDataInput!
}

input VoteUpdateWithoutUserDataInput {
  vote: VoteType
  voteCount: VoteCountUpdateOneRequiredWithoutVotesInput
}

input VoteUpdateWithoutVoteCountDataInput {
  vote: VoteType
  user: VoterUpdateOneRequiredWithoutVotesInput
}

input VoteUpdateWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutUserDataInput!
}

input VoteUpdateWithWhereUniqueWithoutVoteCountInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutVoteCountDataInput!
}

input VoteUpsertWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutUserDataInput!
  create: VoteCreateWithoutUserInput!
}

input VoteUpsertWithWhereUniqueWithoutVoteCountInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutVoteCountDataInput!
  create: VoteCreateWithoutVoteCountInput!
}

input VoteWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  vote: VoteType
  vote_not: VoteType
  vote_in: [VoteType!]
  vote_not_in: [VoteType!]
  user: VoterWhereInput
  voteCount: VoteCountWhereInput
  AND: [VoteWhereInput!]
  OR: [VoteWhereInput!]
  NOT: [VoteWhereInput!]
}

input VoteWhereUniqueInput {
  id: ID
}
`